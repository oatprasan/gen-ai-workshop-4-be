openapi: 3.0.3
info:
  title: Gen AI Workshop API
  description: API for authentication and basic user operations
  version: "1.0.0"
servers:
  - url: http://localhost:3000
paths:
  /register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Validation error
        '500':
          description: Server error
  /login:
    post:
      summary: Authenticate and receive JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Validation error
        '401':
          description: Invalid credentials
  /me:
    get:
      summary: Get current authenticated user
      operationId: getMe
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstname
        - lastname
        - phone
        - birthday
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        phone:
          type: string
        birthday:
          type: string
          format: date
      example:
        email: user@example.com
        password: secret123
        firstname: John
        lastname: Doe
        phone: "0123456789"
        birthday: "1990-01-01"
    RegisterResponse:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
      example:
        id: 1
        email: user@example.com
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      example:
        email: user@example.com
        password: secret123
    TokenResponse:
      type: object
      properties:
        token:
          type: string
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        phone:
          type: string
        birthday:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
      example:
        id: 1
        email: user@example.com
        firstname: John
        lastname: Doe
        phone: "0123456789"
        birthday: "1990-01-01"
        created_at: "2025-08-27T12:00:00Z"
